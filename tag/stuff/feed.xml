<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://cottley.github.io/tag/stuff/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://cottley.github.io/" rel="alternate" type="text/html" />
  <updated>2018-10-03T11:56:47-04:00</updated>
  <id>http://cottley.github.io/tag/stuff/feed.xml</id>

  
  
  

  
    <title type="html">Christopher Ottley | </title>
  

  
    <subtitle>Efforts and Courage are not enough without Purpose and Direction - John F. Kennedy</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Oh, Oracle session, let me know</title>
      <link href="http://cottley.github.io/oh-oracle-session-let-me-know" rel="alternate" type="text/html" title="Oh, Oracle session, let me know" />
      <published>2018-10-02T04:00:00-04:00</published>
      <updated>2018-10-02T04:00:00-04:00</updated>
      <id>http://cottley.github.io/oh-oracle-session-let-me-know</id>
      <content type="html" xml:base="http://cottley.github.io/oh-oracle-session-let-me-know">&lt;p&gt;Oracle. Love it or hate it, it’s all over the place and the basis of many enterprise solutions. While there may be commerical system monitoring and analysis solutions, sometimes (due to cost, speed or simplicity) you just need a quick and dirty solution to make sure you know what’s going on in your database. In this post I am going to discuss how to use a script that I’ve written that lets you monitor the session metric in Oracle’s v$sysmetric view and sends an email if the session metric is over some prescribed limit.&lt;/p&gt;

&lt;p&gt;For this to work we need a few things:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Root access to the database server to setup the cron job (well we could set it up using another account, like the oracle server account, but who wants to try to find random crontabs all over the place in a few years when we inevitably forget about this?)&lt;/li&gt;
  &lt;li&gt;Local database system access to get access to the v$sysmetric database view&lt;/li&gt;
  &lt;li&gt;Access to the sqlplus command at a bash prompt&lt;/li&gt;
  &lt;li&gt;The mail client &lt;a href=&quot;https://linux.die.net/man/1/mailx&quot;&gt;mailx&lt;/a&gt; installed and accessible at a command prompt&lt;/li&gt;
  &lt;li&gt;An open SMTP server (ok this is not necessary as mailx supports lots of secure mail services, but I’m assuming you have some internal accessible only SMTP server available)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First, let us download the &lt;a href=&quot;https://raw.githubusercontent.com/cottley/script_stuff/master/check_oracle_session/check_oracle_session.sh&quot;&gt;check_oracle_session.sh script&lt;/a&gt; from my github script_stuff repository.&lt;/p&gt;

&lt;p&gt;In my test environment I have a user, oracle with a home folder in /home/oracle/.&lt;/p&gt;

&lt;p&gt;Next we place the downloaded check_oracle_session.sh script in the /home/oracle/ folder and make it executable for the oracle user. We can make it executable (and leave it read-only) for everyone by executing:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod 555 check_oracle_session.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If all is setup properly you can run the script and see the script options by executing:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./check_oracle_session.sh -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Below are the options that the script accepts to execute.&lt;/p&gt;

&lt;pre&gt;
NAME:
  check_oracle_session.sh - Automatic Oracle Database Instance Session Checker v1.0

SYNOPSIS:
  check_oracle_session.sh [options]
  Run automated check for the number of sessions for a oracle database instance.
  The script will execute a notification once the number of sessions exceeds
  a specified limit.

OPTIONS:
  -h, --help
    Show this message
  -l, --limit integerlimit
    Specify the session limit you would like to use so that notifications go
    out when the number of sessions meet or exceed this number. E.g. -l 100
  -s, --smtpserver smtpserver
    Specify the smtp server to use when sending notifications
    E.g. -s mail.mycompany.com
  -f, --from fromemailaddress
    Specify the email address the email will appear to come from when there
    are notifications as a result of the limit being met or exceeded
    E.g. -f noreply@mycompany.com
  -t, --to toemailaddress
    Specify the email address to email when limit has been met or exeeded
    E.g. -t me@mycompany.com
  -v, --verbose
    Verbose output. Note: This will send an email even if the limit has not
    been met or exceeded
&lt;/pre&gt;

&lt;p&gt;An example invocation that is checking if the session limit has met or exceeded 50 sessions, using the SMTP server mail.mycompany.com, with the email coming from noreply@mycompany.com and the email being sent to me@mycompany.com:&lt;/p&gt;
&lt;pre&gt;
./check_oracle_session.sh -l 50 -s mail.mycompany.com -f noreply@mycompany.com -t me@mycompany.com
&lt;/pre&gt;

&lt;p&gt;This script assumes that the oracle environment has been setup so that you can use sqlplus at a command prompt and connect as the system DBA.&lt;/p&gt;

&lt;p&gt;In my environment, I also have a seperate oracle.bash file that I source to set the ORACLE_SID, the TNS_ADMIN home etc. You may or may not have a similar configuration, however whatever steps you need to get sqlplus working at a command prompt, that’s what you need to do to test sqlplus.&lt;/p&gt;

&lt;pre&gt;
[oracle@mydatabase ~]$ sqlplus / as sysdba

SQL*Plus: Release 12.1.0.2.0 Production on Tue Oct 2 10:52:36 2018

Copyright (c) 1982, 2014, Oracle.  All rights reserved.


Connected to:
Oracle Database 12c Enterprise Edition Release 12.1.0.2.0 - 64bit Production
With the Partitioning, OLAP, Advanced Analytics and Real Application Testing options

SQL&amp;gt;
&lt;/pre&gt;

&lt;p&gt;We can easily test our script to ensure the notifications work by asking it to send an email with a low limit, like 0.&lt;/p&gt;

&lt;pre&gt;
./check_oracle_session.sh -l 0 -s mail.mycompany.com -f noreply@mycompany.com -t me@mycompany.com
&lt;/pre&gt;

&lt;p&gt;Once that works, we can now schedule the script to run every 5 minutes via cron.&lt;/p&gt;

&lt;p&gt;In the crontab we change to the oracle user (su - oracle) and execute the command (-c) in double quotes.&lt;/p&gt;

&lt;p&gt;In my test environment I source the oracle.bash to set the environment variables and then run the script with the parameters tested earlier.&lt;/p&gt;

&lt;pre&gt;
*/5 * * * * su - oracle -c &quot;source /home/oracle/oracle.bash &amp;gt; /dev/null &amp;amp;&amp;amp; /home/oracle/check_oracle_session.sh -l 50 -s mail.mycompany.com -f noreply@mycompany.com -t me@mycompany.com&quot;
&lt;/pre&gt;

&lt;p&gt;If your oracle user has the environment variables set already and you don’t need to source any configuration scripts you can use the below crontab entry instead.&lt;/p&gt;

&lt;pre&gt;
*/5 * * * * su - oracle -c &quot;/home/oracle/check_oracle_session.sh -l 50 -s mail.mycompany.com -f noreply@mycompany.com -t me@mycompany.com&quot;
&lt;/pre&gt;

&lt;p&gt;Once complete you should get confirmation that the crontab has been saved and installed.&lt;/p&gt;

&lt;pre&gt;
[root@mydatabase ~]# crontab -e
no crontab for root - using an empty one
crontab: installing new crontab
[root@mydatabase ~]#
&lt;/pre&gt;

&lt;p&gt;And Voila! The script will run every 5 minutes and notify you via email if the session limit has been exceeded.&lt;/p&gt;

&lt;p&gt;You can also track the individual runs of the script by looking at the /var/log/check_oracle_session.log.&lt;/p&gt;

&lt;pre&gt;
[root@mydatabase ~]# tail -f /var/log/check_oracle_session.log
2018-10-02T12:05:01-0500 Limit is: 50 and No. Of Sessions is: 48
2018-10-02T12:10:01-0500 Limit is: 50 and No. Of Sessions is: 50
2018-10-02T12:15:01-0500 Limit is: 50 and No. Of Sessions is: 50
2018-10-02T12:20:01-0500 Limit is: 50 and No. Of Sessions is: 49
2018-10-02T12:25:01-0500 Limit is: 50 and No. Of Sessions is: 48
2018-10-02T12:30:01-0500 Limit is: 50 and No. Of Sessions is: 48
2018-10-02T12:35:01-0500 Limit is: 50 and No. Of Sessions is: 48
2018-10-02T12:40:02-0500 Limit is: 50 and No. Of Sessions is: 48
2018-10-02T12:45:01-0500 Limit is: 50 and No. Of Sessions is: 48
2018-10-02T12:50:01-0500 Limit is: 50 and No. Of Sessions is: 48
&lt;/pre&gt;

&lt;p&gt;You can now extend this script if desired and make modifications to monitor multiple metrics, possibly add logic to check the average value of the metric (using v$sysmetric_summary) and only give an alert if the new value for the metric is, say, 10% over the average instead of a hard coded value. You can also add more notification options, such as notifications to a slack channel or even a text message when you are out of wireless (but not cell network) range depending on the API interfaces you have available.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Christopher Ottley</name>
        
        
      </author>

      

      
        <category term="Stuff" />
      
        <category term="Howto" />
      
        <category term="Scripts" />
      
        <category term="Oracle" />
      
        <category term="Bash" />
      

      
        <summary type="html">Oracle. Love it or hate it, it’s all over the place and the basis of many enterprise solutions. While there may be commerical system monitoring and analysis solutions, sometimes (due to cost, speed or simplicity) you just need a quick and dirty solution to make sure you know what’s going on in your database. In this post I am going to discuss how to use a script that I’ve written that lets you monitor the session metric in Oracle’s v$sysmetric view and sends an email if the session metric is over some prescribed limit.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Website Redesign</title>
      <link href="http://cottley.github.io/website-redesign" rel="alternate" type="text/html" title="Website Redesign" />
      <published>2018-09-26T10:15:00-04:00</published>
      <updated>2018-09-26T10:15:00-04:00</updated>
      <id>http://cottley.github.io/website-redesign</id>
      <content type="html" xml:base="http://cottley.github.io/website-redesign">&lt;p&gt;I’ve had a number of websites over the years in one form or the other. Usually the websites were project websites that happened to have a small about section where I wrote something short and unmemorable about myself. Unfortunately I got busy and maintaining those websites got de-prioritized, finally existing in some internet archive somewhere and disappearing from active use. The world has changed a bit since then and I got curious as to the advancements of static site generators like &lt;a href=&quot;https://forrest.apache.org/&quot;&gt;Apache Forest&lt;/a&gt;. A static site generator uses dynamic logic to create static websites that load faster and would be easier to maintain for someone working part-time on site maintenace, like me.&lt;/p&gt;

&lt;p&gt;While I generally like &lt;a href=&quot;http://www.apache.org/&quot;&gt;Apache&lt;/a&gt; products, &lt;a href=&quot;https://forrest.apache.org/&quot;&gt;Apache Forest&lt;/a&gt; doesn’t seem to have been updated for a while and I aimed to find the most popular static site generator in use. In open source, high usage usually means that it’s reasonably maintained and fits some minimal use cases very well. After some research I happened upon &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don’t know Ruby, but the installation seemed pretty straight forward and seeing as GitHub seems to use it for their GitHub pages service, I figured I couldn’t go too wrong. One of the nice things about &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is that there are lots of tutorials and instructions all over the Internet on how to make all sorts of websites with it. GitHub has some good instructions as well, but I decided to see if I could find some instructions that were more generic which would allow me to move my site to anywhere without worrying about any kind of GitHub specific pages config (not that I really saw any, but you never know).&lt;/p&gt;

&lt;p&gt;Seeing as a I like to keep things seperated, I fired up a brand spanking new &lt;a href=&quot;https://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; 18.04 Desktop VM, did a minimal install, updated everything, installed ssh and I was ready to start.&lt;/p&gt;

&lt;p&gt;At a bash prompt, a quick…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install ruby ruby-dev build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and I was ready to install Jekyll.&lt;/p&gt;

&lt;p&gt;Following the instructions from the &lt;a href=&quot;https://jekyllrb.com/docs/installation/ubuntu/&quot;&gt;website&lt;/a&gt; and executing at a bash prompt again…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo '# Install Ruby Gems to ~/gems' &amp;gt;&amp;gt; ~/.bashrc
echo 'export GEM_HOME=$HOME/gems' &amp;gt;&amp;gt; ~/.bashrc
echo 'export PATH=$HOME/gems/bin:$PATH' &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc
gem install jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and now Jekyll is installed. It really was painless.&lt;/p&gt;

&lt;p&gt;Time to serve up a site for development…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new cottley-site
cd cottley-site/
bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…And here we go.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/website-redesign-figure1.png&quot; alt=&quot;website-redesign-figure1&quot; title=&quot;First run with default website&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ugh! I mean &lt;em&gt;yay&lt;/em&gt; (obviously), but also, Ugh!&lt;/p&gt;

&lt;p&gt;Granted, this was about 5 minutes of work (including network downloads), but goshdarnit, first impressions matter. I understand the bare minimalism so you can customize what you want, but, ugh. This was supposed to make my website life easier, not look so, plain. I know I know, there are links to some themes at &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll Themes.org&lt;/a&gt; and &lt;a href=&quot;https://jekyllthemes.io/&quot;&gt;Jekyll Themes.io&lt;/a&gt; are on the website under the resources, but if you at least give me a link to one of them on the very first site I throw up I’ll be more likely to think that even the minimal effort was worth it because changing the theme is easy and possible.&lt;/p&gt;

&lt;p&gt;I found a super nice theme called &lt;a href=&quot;http://jekyllthemes.org/themes/jasper2/&quot;&gt;Jasper2&lt;/a&gt; and spent a few minutes trying to figure out how to get it installed.&lt;/p&gt;

&lt;p&gt;…And you don’t install it, the theme &lt;em&gt;IS&lt;/em&gt; the site and you need to config the site and put the posts in it. Ok, fine. Let’s do a serve in an extracted Jasper2 folder… and it doesn’t work. Of course. At least it tells me I have to install some gems and to run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All seems to be working well until it can’t install nokogiri, whatever that is and suggests that I&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install nokogiri -v '1.8.4' --source
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which doesn’t work and so I try&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install nokogiri -v '1.8.4' --source 'https://rubygems.org/'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which still doesn’t work.&lt;/p&gt;

&lt;p&gt;Looking at the error, it can’t find zlib for some reason so I go looking to install some ruby zlib library. I find one and…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install ruby-zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Still doesn’t work. Installing a theme shouldn’t be this hard man! Looking at the error further it seems that Jekyll / Ruby invokes gcc to compile some code and it can’t find the zlib header library. I do a&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libz-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and manage to install nokogiri ok now.&lt;/p&gt;

&lt;p&gt;A final&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install
bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in the terminal and I finally, FINALLY have the theme site up and running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/website-redesign-figure2.png&quot; alt=&quot;website-redesign-figure2&quot; title=&quot;First run with Jasper2 theme&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I play with some config settings, replace some images, start putting in posts and boom, new website.&lt;/p&gt;

&lt;p&gt;The only thing Jasper2 doesn’t seem to do is generate a nice xml sitemap for me, so I grabbed a &lt;a href=&quot;https://github.com/jekyll/jekyll-sitemap&quot;&gt;Jekyll Sitemap Generator Plugin&lt;/a&gt; and installed it (which is much easier than the theme crazy).&lt;/p&gt;

&lt;p&gt;That’s it, I’m going to try continue consolidating my tech rantings here so if at least, dear reader, you don’t find me entertaining, you at least find me informative.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Christopher Ottley</name>
        
        
      </author>

      

      
        <category term="Stuff" />
      
        <category term="Projects" />
      

      
        <summary type="html">I’ve had a number of websites over the years in one form or the other. Usually the websites were project websites that happened to have a small about section where I wrote something short and unmemorable about myself. Unfortunately I got busy and maintaining those websites got de-prioritized, finally existing in some internet archive somewhere and disappearing from active use. The world has changed a bit since then and I got curious as to the advancements of static site generators like Apache Forest. A static site generator uses dynamic logic to create static websites that load faster and would be easier to maintain for someone working part-time on site maintenace, like me.</summary>
      

      
      
    </entry>
  
</feed>
